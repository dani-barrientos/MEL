/**
\page tasking_constructs Higher level constructs for the tasking system
Although the tasking system shown if \ref tasking_system "this section" by itself is a powerful tool, we can provide higher constructs to provide
more flexibility.

The very first abstraction is the \ref ::core::Future "Future" class. Actually, this is not an abstraction related directly with the tasking system, 
but it's natural to be used by it. Because this type represent a *value that maybe is not present yet*, it's the perfect element to use as a way to communicate
tasks between them.

The first function to stop in is \ref ::tasking::Runnable::execute. This function allows to execute a *calllable* with no input arguments, and returns a future.
\code
auto th1 = ThreadRunnable::create();
    th1->fireAndForget( []()
        {
            auto th = ThreadRunnable::getCurrentThreadRunnable();
            Future<int> fut = th->execute<int>( 
                [](){
                    Process::wait(100);
                    return 10;
                }
            );
            try
            {
                auto res = waitForFutureMThread(fut);
                text::info("Result = {}",res.value());
            }catch( core::WaitException& e)
            {
                text::error("Error waiting. Reason = {}",e.what());
            }
            catch(...)
            {
                text::error("Error waiting. Unknown Reason");
            }

        }
        ,0,Runnable::killFalse
    );
\endcode
Explanation: a \ref ::tasking::ThreadRunnable "ThreadRunnable" is posted a task, which execute a task that returns an *int* in some Runnable, in this case, the same ThreadRunnable to show one more timeout
the cooperative multitasking power of the microthread system. The **Process::wait** is inserted only to be clear that the caller will have to have some timeout
for the function to be executed.
*/
